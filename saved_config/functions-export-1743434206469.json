[{"id":"get_sources","user_id":"system","name":"Get Sources","type":"action","content":"\"\"\"\ntitle: Get Full Sources\nauthor: Eli Pinals (and gpt ofc)\nicon_url: https://www.svgrepo.com/download/521518/book-open.svg\n\"\"\"\n\nimport requests\nfrom pydantic import BaseModel\nfrom typing import Optional\nimport asyncio\nimport re\nimport os\n\n# API URL root\nAPI_BASE_URL = \"https://llm-dev-eli.apps.tenoran.automation.otic.open6g.net\"\n# /get_full_sources full endpoint URL\nAPI_URL = API_BASE_URL + \"/get_full_sources\"\n\n\nclass Action:\n    class Valves(BaseModel):\n        pass\n\n    def __init__(self):\n        self.valves = self.Valves()\n\n    def generate_request_id(self, question):\n        request_id = question.lower()\n        request_id = re.sub(r\"[^a-z0-9\\s]\", \"\", request_id)\n        request_id = re.sub(r\"\\s+\", \"_\", request_id.strip())\n        return request_id[:100]\n\n    async def action(\n        self,\n        body: dict,\n        __user__=None,\n        __event_emitter__=None,\n        __event_call__=None,\n    ) -> Optional[dict]:\n        messages = body.get(\"messages\", [])\n        user_messages = [msg[\"content\"] for msg in messages if msg[\"role\"] == \"user\"]\n        latest_user_message = user_messages[-1] if user_messages else None\n\n        if not latest_user_message:\n            if __event_emitter__:\n                await __event_emitter__(\n                    {\n                        \"type\": \"message\",\n                        \"data\": {\"content\": \"Error: No user message found.\"},\n                    }\n                )\n            return\n\n        request_id = self.generate_request_id(latest_user_message)\n\n        try:\n            response = requests.post(\n                API_URL, json={\"request_id\": request_id}, timeout=5\n            )\n            response_data = response.json()\n            if response_data.get(\"status\") == \"success\":\n                sources = response_data.get(\"sources\", [])\n                formatted_sources = \"\\n\\n### Sources\\n\"\n                if not sources:\n                    formatted_sources += \"No sources found!\"\n                else:\n                    for src in sources:\n                        formatted_sources += f\"- [\\\"{src['section_title']}\\\" â€” *{src['document_title']}*]({src['link']})\\n\"\n            else:\n                formatted_sources = \"\\n\\nNo sources sent!\"\n        except requests.exceptions.JSONDecodeError:\n            formatted_sources = \"\\n\\n**Error:** Invalid JSON response.\"\n        except Exception as e:\n            formatted_sources = f\"\\n\\n**Error fetching sources:** {str(e)}\"\n\n        if __event_emitter__:\n            await __event_emitter__(\n                {\n                    \"type\": \"status\",\n                    \"data\": {\"description\": \"Getting Sources...\", \"done\": False},\n                }\n            )\n            await asyncio.sleep(1)\n            await __event_emitter__(\n                {\n                    \"type\": \"message\",\n                    \"data\": {\n                        \"content\": formatted_sources,\n                        \"id\": f\"sources.{request_id}\",\n                        \"name\": \"Get Sources\",\n                    },\n                }\n            )\n            await __event_emitter__(\n                {\"type\": \"status\", \"data\": {\"description\": \"\", \"done\": True}}\n            )\n","meta":{"description":"get all sources for given request","manifest":{"title":"Get Full Sources","author":"Eli Pinals (and gpt ofc)","icon_url":"https://www.svgrepo.com/download/521518/book-open.svg"}},"is_active":true,"is_global":false,"updated_at":1743434200,"created_at":1742841743}]